name: CI/CD - Node.js Project with Heroku Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      # Step 3: Cache node_modules to speed up builds
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{  
                          hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Lint the code
      - name: Run lint
        run: npm run lint

      # Step 6: Run tests
      - name: Run tests
        run: npm test

  

      # Step 7: Build the project
      - name: Build the project
        run: npm run build

      # Step 8: Generate coverage report
      - name: Generate coverage report
        run: npm run coverage

      # # Step 9: Upload coverage report
      # - name: Upload coverage report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: coverage-report
      #     path: coverage/lcov.info

      # # Step 10: Upload build artifact
      # - name: Upload production build as artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: build-artifact
      #     path: ./dist

  # cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Download build artifact from CI job
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: ./dist

      # Step 3: Setup Node.js (if needed for post-build scripts)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

    


      # # Step 4: Install Heroku CLI (optional if needed)
      # - name: Install Heroku CLI
      #   run: |
      #     curl https://cli-assets.heroku.com/install.sh | sh

      # # Step 5: Authenticate with Heroku
      # - name: Authenticate to Heroku
      #   env:
      #     HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      #   run: |
      #     echo "machine api.heroku.com" > ~/.netrc
      #     echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
      #     echo "  password $HEROKU_API_KEY" >> ~/.netrc
      #     echo "machine git.heroku.com" >> ~/.netrc
      #     echo "  login ${{ secrets.HEROKU_EMAIL }}" >> ~/.netrc
      #     echo "  password $HEROKU_API_KEY" >> ~/.netrc

      # # Step 6: Push to Heroku
      # - name: Deploy to Heroku
      #   run: |
      #     git remote add heroku  
      #                 https://git.heroku.com/YOUR-HEROKU-APP.git
      #     git push heroku HEAD:main --force

      # # Step 7: Post-deployment smoke test
      # - name: Smoke test - check app health
      #   run: curl -s -o /dev/null -w "%{http_code}" 
      #                      https://YOUR-HEROKU-APP.herokuapp.com

      # # Step 8: Optional Notification (e.g. Slack)
      # - name: Notify on successful deployment (Slack optional)
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "âœ… Deployment to Heroku was successful!"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
